#import functions for exporting to json
addpath("C:\Users\slin\Desktop\Lumerical_Examples_Models\GitHub\lum_speos_optimization");
RCWA_utility_functions;
GratingExport_utility_functions;

#returns a list of results this script produces
function listScriptResults(){
    #return {'wg_neff_real': 0, 'wg_neff_imag': 0, 'wg_loss': 0, 'wg_ng': 0, 'ps_data_filename':'empty', 'Vpi_Lpi':0}; 
    #return {'json_filename':''}; #type:string
    return {'period' : 0,'duty_cycle' : 0,'depth' : 0,'slant_angle' : 0,'wavelength' : 0}; #type:int
	#return {'period' : '','duty_cycle' : '','depth' : '','slant_angle' : '','wavelength' : ''};
}

#returns a list of parameters this script produces
function listScriptParameters(){

    #Parameter Units
    # period - nm
    # duty_cycle - none (ratio), type: double
    # depth - nm
    # slant_angle - type:int or double, degrees
    # wavelength - nm    
	
    return {
        'period':0,
        'duty_cycle':0,
        'depth':0,
        'slant_angle':0,
        'wavelength':0
        };
		
    #return {
        #'period':474,
        #'duty_cycle':0.2,
        #'depth':600,
        #'slant_angle':45,
        #'wavelength':624        
        #};
}

#returns results
function computeScriptResults(parameters){  #argument is a struct with fields giving values of different parameters
switchtolayout;

setnamed("::model","period",parameters.period*1e-9);
setnamed("::model","duty_cycle",parameters.duty_cycle);
setnamed("::model","depth",parameters.depth*1e-9);
setnamed("::model","slant_angle",parameters.slant_angle);
setnamed("::model","wavelength",parameters.wavelength*1e-9);
setnamed("RCWA","interface position","reference"); #try to force update the interface info to prevent a rare error
run;
json_data = gc_to_json(getresult("RCWA", "grating_characterization"),
                    getresult("RCWA", "grating_orders"),
                    getresult("RCWA", "substrate"),
                    getnamed("RCWA", "x span"),
                    getnamed("RCWA", "y span"),
                    true);                 

#format strings due to decimals
period_string = num2str(parameters.period,"%0.f");
period_string = replacestring(period_string,".","");
dc_string = num2str(parameters.duty_cycle*100,"%0.f");
dc_string = replacestring(dc_string,".","");
depth_string = num2str(parameters.depth,"%0.f");
sa_string = num2str(parameters.slant_angle);
wl_string = num2str(parameters.wavelength,"%0.f");

json_filename=
        "p" + period_string +
        "_dc" + dc_string +
        "_d" + depth_string +
        "_sa" + sa_string +
        "_wl" + wl_string +
        ".json";                   
WriteGratingData(json_filename, json_data);

out_period = str2num(period_string);
out_dc = str2num(dc_string);
out_depth = str2num(depth_string);
out_sa = str2num(sa_string);
out_wl = str2num(wl_string);

#return { 'json_filename':json_filename};
#return { 'json_filename':json_filename, 'test_output_period' : parameters.period};
return {'period' : out_period,
		'duty_cycle' : out_dc,
		'depth' : out_depth,
		'slant_angle' : out_sa,
		'wavelength' : out_wl
		};
}
